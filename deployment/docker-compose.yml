version: '3.8'

services:
  # Churn Prediction API
  churn-api:
    build:
      context: ..
      dockerfile: deployment/Dockerfile
    container_name: churn-prediction-api
    ports:
      - "8000:8000"
    environment:
      - PYTHONPATH=/app
      - LOG_LEVEL=INFO
      - MODEL_PATH=/app/models/churn_model.pkl
    volumes:
      - ../models:/app/models:ro  # Read-only model files
      - ../logs:/app/logs         # Logs directory
      - ../reports:/app/reports   # Reports directory
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8000/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s
    networks:
      - churn-network
    depends_on:
      - prometheus
      - grafana

  # Prometheus for metrics collection
  prometheus:
    image: prom/prometheus:latest
    container_name: churn-prometheus
    ports:
      - "9090:9090"
    volumes:
      - ./monitoring/prometheus.yml:/etc/prometheus/prometheus.yml:ro
      - prometheus_data:/prometheus
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/etc/prometheus/console_libraries'
      - '--web.console.templates=/etc/prometheus/consoles'
      - '--storage.tsdb.retention.time=200h'
      - '--web.enable-lifecycle'
    restart: unless-stopped
    networks:
      - churn-network

  # Grafana for visualization
  grafana:
    image: grafana/grafana:latest
    container_name: churn-grafana
    ports:
      - "3000:3000"
    environment:
      - GF_SECURITY_ADMIN_USER=admin
      - GF_SECURITY_ADMIN_PASSWORD=admin123
      - GF_USERS_ALLOW_SIGN_UP=false
    volumes:
      - grafana_data:/var/lib/grafana
      - ./monitoring/grafana/provisioning:/etc/grafana/provisioning:ro
      - ./monitoring/grafana/dashboards:/var/lib/grafana/dashboards:ro
    restart: unless-stopped
    networks:
      - churn-network

  # Redis for caching (optional)
  redis:
    image: redis:7-alpine
    container_name: churn-redis
    ports:
      - "6379:6379"
    volumes:
      - redis_data:/data
    restart: unless-stopped
    networks:
      - churn-network
    command: redis-server --appendonly yes

  # Nginx reverse proxy (optional)
  nginx:
    image: nginx:alpine
    container_name: churn-nginx
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./nginx/nginx.conf:/etc/nginx/nginx.conf:ro
      - ./nginx/ssl:/etc/nginx/ssl:ro
    restart: unless-stopped
    networks:
      - churn-network
    depends_on:
      - churn-api

volumes:
  prometheus_data:
    driver: local
  grafana_data:
    driver: local
  redis_data:
    driver: local

networks:
  churn-network:
    driver: bridge
    ipam:
      config:
        - subnet: 172.20.0.0/16