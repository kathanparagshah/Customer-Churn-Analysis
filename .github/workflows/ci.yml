name: CI/CD Pipeline

on:
  push:
    branches: [ main, develop ]
    tags:
      - '*'
  pull_request:
    branches: [ main ]

jobs:
  test:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        python-version: [3.9, '3.10', '3.11']

    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Python ${{ matrix.python-version }}
      uses: actions/setup-python@v4
      with:
        python-version: ${{ matrix.python-version }}
    
    - name: Cache pip dependencies
      uses: actions/cache@v3
      with:
        path: ~/.cache/pip
        key: ${{ runner.os }}-pip-${{ hashFiles('**/requirements*.txt') }}
        restore-keys: |
          ${{ runner.os }}-pip-
    
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt -r test-requirements.txt
    
    - name: Setup Kaggle credentials
      env:
        KAGGLE_USERNAME: ${{ secrets.KAGGLE_USERNAME }}
        KAGGLE_KEY: ${{ secrets.KAGGLE_KEY }}
      run: |
        # Create ~/.kaggle directory
        mkdir -p ~/.kaggle
        
        # Option 1: Mount project kaggle.json to ~/.kaggle/kaggle.json
        if [ -f "kaggle.json" ]; then
          cp kaggle.json ~/.kaggle/kaggle.json
          chmod 600 ~/.kaggle/kaggle.json
          echo "Using kaggle.json from project root"
        # Option 2: Create kaggle.json from secrets
        elif [ ! -z "$KAGGLE_USERNAME" ] && [ ! -z "$KAGGLE_KEY" ]; then
          echo '{"username":"'$KAGGLE_USERNAME'","key":"'$KAGGLE_KEY'"}' > ~/.kaggle/kaggle.json
          chmod 600 ~/.kaggle/kaggle.json
          echo "Created kaggle.json from environment variables"
        else
          echo "Warning: No Kaggle credentials found. Tests may fail if they require data download."
        fi
    
    - name: Run linting
      run: |
        flake8 src/ --count --select=E9,F63,F7,F82 --show-source --statistics
        flake8 src/ --count --exit-zero --max-complexity=10 --max-line-length=127 --statistics
    
    - name: Run tests with pytest
      env:
        KAGGLE_USERNAME: ${{ secrets.KAGGLE_USERNAME }}
        KAGGLE_KEY: ${{ secrets.KAGGLE_KEY }}
      run: |
        pytest src/tests/ -v --cov=src --cov-report=xml --cov-report=html
    
    - name: Upload coverage to Codecov
      uses: codecov/codecov-action@v3
      with:
        file: ./coverage.xml
        flags: unittests
        name: codecov-umbrella
        fail_ci_if_error: false

  build:
    needs: test
    runs-on: ubuntu-latest
    if: github.event_name == 'push' && (github.ref == 'refs/heads/main' || startsWith(github.ref, 'refs/tags/'))
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.10'
    
    - name: Install build dependencies
      run: |
        python -m pip install --upgrade pip
        pip install build twine
    
    - name: Build package
      run: |
        python -m build
    
    - name: Upload build artifacts
      uses: actions/upload-artifact@v4
      with:
        name: dist-packages
        path: dist/
    
    # Publish to TestPyPI on any tag
    - name: Publish to TestPyPI
      if: startsWith(github.ref, 'refs/tags/')
      env:
        TWINE_USERNAME: __token__
        TWINE_PASSWORD: ${{ secrets.TEST_PYPI_API_TOKEN }}
      run: |
        twine upload --repository testpypi dist/*
    
    # Publish to PyPI only on v* tags (e.g., v1.0.0, v2.1.3)
    - name: Publish to PyPI
      if: startsWith(github.ref, 'refs/tags/v')
      env:
        TWINE_USERNAME: __token__
        TWINE_PASSWORD: ${{ secrets.PYPI_API_TOKEN }}
      run: |
        twine upload dist/*

  release:
    needs: build
    runs-on: ubuntu-latest
    if: startsWith(github.ref, 'refs/tags/')
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Download build artifacts
      uses: actions/download-artifact@v3
      with:
        name: dist-packages
        path: dist/
    
    - name: Create GitHub Release
      uses: softprops/action-gh-release@v1
      with:
        files: dist/*
        generate_release_notes: true
        draft: false
        prerelease: ${{ !startsWith(github.ref, 'refs/tags/v') }}
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

  docker-smoke-test:
    needs: test
    runs-on: ubuntu-latest
    if: github.event_name == 'push'
    
    steps:
    - uses: actions/checkout@v3
    
    # Build the image from the repo root and tag it
    - name: Build Docker image
      run: docker build -f deployment/Dockerfile -t churn-app:latest .
    
    # Tear down any previous test container
    - name: Clean up old container
      run: docker rm -f churn-smoke-test || true
    
    # Run the container in the background
    - name: Run app container
      run: docker run -d --rm -p 8000:8000 --name churn-smoke-test churn-app:latest
    
    # Wait for health endpoint (status-code based)
    - name: Wait for health endpoint
      run: |
        echo "Waiting for health endpoint…"
        timeout=60
        elapsed=0
        until [ "$(curl -s -o /dev/null -w "%{http_code}" http://localhost:8000/health)" = "200" ]; do
          echo "…still waiting ($elapsed/$timeout seconds)"
          sleep 2
          elapsed=$((elapsed + 2))
          if [ $elapsed -ge $timeout ]; then
            echo "Health check timeout after $timeout seconds"
            docker logs churn-smoke-test
            exit 1
          fi
        done
        echo "Health endpoint is ready!"
    
    # Test health endpoint and validate response
    - name: Test health endpoint
      run: |
        echo "Testing health endpoint..."
        response=$(curl --silent --fail http://localhost:8000/health)
        echo "Health response: $response"
        
        # Validate JSON structure
        echo "$response" | jq -e '.status == "healthy"' > /dev/null
        echo "$response" | jq -e '.loaded == true' > /dev/null
        echo "✅ Health endpoint validation passed"
    
    # Smoke test predict endpoint with status code validation
    - name: Smoke test predict endpoint
      run: |
        echo "Smoke testing prediction endpoint..."
        status_code=$(curl -s -o /dev/null -w "%{http_code}" \
          -X POST http://localhost:8000/predict \
          -H 'Content-Type: application/json' \
          -d '{"CreditScore":650,"Geography":"France","Gender":"Male","Age":30,"Tenure":3,"Balance":10000,"NumOfProducts":1,"HasCrCard":1,"IsActiveMember":1,"EstimatedSalary":50000}')
        
        if [ "$status_code" = "200" ]; then
          echo "✅ Predict endpoint smoke test passed (HTTP $status_code)"
        else
          echo "❌ Predict endpoint smoke test failed (HTTP $status_code)"
          exit 1
        fi
    
    # Test prediction endpoint with full response validation
    - name: Test prediction endpoint response
      run: |
        echo "Testing prediction endpoint response structure..."
        response=$(curl --silent --fail -X POST http://localhost:8000/predict \
          -H "Content-Type: application/json" \
          -d '{
            "CreditScore": 650,
            "Geography": "France",
            "Gender": "Female",
            "Age": 35,
            "Tenure": 5,
            "Balance": 50000.0,
            "NumOfProducts": 2,
            "HasCrCard": 1,
            "IsActiveMember": 1,
            "EstimatedSalary": 75000.0
          }')
        echo "Prediction response: $response"
        
        # Validate prediction response structure
        echo "$response" | jq -e '.churn_probability' > /dev/null
        echo "$response" | jq -e '.churn_prediction' > /dev/null
        echo "$response" | jq -e '.risk_level' > /dev/null
        echo "$response" | jq -e '.confidence' > /dev/null
        echo "$response" | jq -e '.version' > /dev/null
        echo "✅ Prediction endpoint response validation passed"
    
    # Test prediction endpoint with invalid data (should return 422)
    - name: Test prediction endpoint validation
      run: |
        echo "Testing prediction endpoint validation..."
        http_code=$(curl --silent --write-out "%{http_code}" --output /dev/null \
          -X POST http://localhost:8000/predict \
          -H "Content-Type: application/json" \
          -d '{"CreditScore": 999, "Geography": "InvalidCountry"}')
        
        if [ "$http_code" = "422" ]; then
          echo "✅ Validation correctly rejected invalid data (HTTP $http_code)"
        else
          echo "❌ Expected HTTP 422 for invalid data, got HTTP $http_code"
          exit 1
        fi
    
    # Check container logs for sklearn version warnings
    - name: Validate sklearn version compatibility
      run: |
        echo "Checking container logs for sklearn version warnings..."
        logs=$(docker logs churn-smoke-test 2>&1)
        
        # Check if there are any InconsistentVersionWarning messages
        if echo "$logs" | grep -i "InconsistentVersionWarning\|version.*mismatch\|version.*incompatible"; then
          echo "❌ Found sklearn version warnings in container logs:"
          echo "$logs" | grep -i "InconsistentVersionWarning\|version.*mismatch\|version.*incompatible"
          exit 1
        else
          echo "✅ No sklearn version warnings found"
        fi
        
        # Check for successful model loading
        if echo "$logs" | grep -q "Model loaded successfully"; then
          echo "✅ Model loaded successfully"
        else
          echo "⚠️  Model loading message not found in logs"
          echo "Container logs:"
          echo "$logs"
        fi
    
    # Tear down
    - name: Stop container
      run: docker stop churn-smoke-test

  container-registry:
    needs: [test, docker-smoke-test]
    runs-on: ubuntu-latest
    if: github.event_name == 'push' && (github.ref == 'refs/heads/main' || startsWith(github.ref, 'refs/tags/'))
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3
    
    - name: Log in to Docker Hub
      uses: docker/login-action@v3
      with:
        username: ${{ secrets.DOCKER_USERNAME }}
        password: ${{ secrets.DOCKER_PASSWORD }}
    
    - name: Extract metadata
      id: meta
      uses: docker/metadata-action@v5
      with:
        images: ${{ secrets.DOCKER_USERNAME }}/customerchurn
        tags: |
          type=ref,event=branch
          type=ref,event=pr
          type=semver,pattern={{version}}
          type=semver,pattern={{major}}.{{minor}}
          type=raw,value=latest,enable={{is_default_branch}}
    
    - name: Build and push Docker image
      uses: docker/build-push-action@v5
      with:
        context: ./deployment
        push: true
        tags: ${{ steps.meta.outputs.tags }}
        labels: ${{ steps.meta.outputs.labels }}
        cache-from: type=gha
        cache-to: type=gha,mode=max

  integration-test:
    needs: test
    runs-on: ubuntu-latest
    if: github.event_name == 'push'
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.10'
    
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
    
    - name: Setup Kaggle credentials for integration test
      env:
        KAGGLE_USERNAME: ${{ secrets.KAGGLE_USERNAME }}
        KAGGLE_KEY: ${{ secrets.KAGGLE_KEY }}
      run: |
        mkdir -p ~/.kaggle
        if [ -f "kaggle.json" ]; then
          cp kaggle.json ~/.kaggle/kaggle.json
          chmod 600 ~/.kaggle/kaggle.json
        elif [ ! -z "$KAGGLE_USERNAME" ] && [ ! -z "$KAGGLE_KEY" ]; then
          echo '{"username":"'$KAGGLE_USERNAME'","key":"'$KAGGLE_KEY'"}' > ~/.kaggle/kaggle.json
          chmod 600 ~/.kaggle/kaggle.json
        fi
    
    - name: Test data download functionality
      env:
        KAGGLE_USERNAME: ${{ secrets.KAGGLE_USERNAME }}
        KAGGLE_KEY: ${{ secrets.KAGGLE_KEY }}
      run: |
        python -c "
        from src.data.load_data import DataLoader
        loader = DataLoader()
        file_path = loader.download_from_kaggle()
        print(f'Download result: {file_path}')
        print(f'File exists: {file_path.exists()}')
        "
