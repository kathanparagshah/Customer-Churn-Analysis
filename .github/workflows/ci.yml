name: CI/CD Pipeline

on:
  push:
    branches: [ main, develop ]
    tags:
      - '*'
  pull_request:
    branches: [ main ]

jobs:
  test:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        python-version: [3.9, '3.10', '3.11']

    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Python ${{ matrix.python-version }}
      uses: actions/setup-python@v4
      with:
        python-version: ${{ matrix.python-version }}
    
    - name: Cache pip dependencies
      uses: actions/cache@v3
      with:
        path: ~/.cache/pip
        key: ${{ runner.os }}-pip-${{ hashFiles('**/requirements*.txt') }}
        restore-keys: |
          ${{ runner.os }}-pip-
    
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt -r requirements-dev.txt
        pip install pytest pytest-cov flake8 codecov
    
    - name: Setup Kaggle credentials
      env:
        KAGGLE_USERNAME: ${{ secrets.KAGGLE_USERNAME }}
        KAGGLE_KEY: ${{ secrets.KAGGLE_KEY }}
      run: |
        # Create ~/.kaggle directory
        mkdir -p ~/.kaggle
        
        # Option 1: Mount project kaggle.json to ~/.kaggle/kaggle.json
        if [ -f "kaggle.json" ]; then
          cp kaggle.json ~/.kaggle/kaggle.json
          chmod 600 ~/.kaggle/kaggle.json
          echo "Using kaggle.json from project root"
        # Option 2: Create kaggle.json from secrets
        elif [ ! -z "$KAGGLE_USERNAME" ] && [ ! -z "$KAGGLE_KEY" ]; then
          echo '{"username":"'$KAGGLE_USERNAME'","key":"'$KAGGLE_KEY'"}' > ~/.kaggle/kaggle.json
          chmod 600 ~/.kaggle/kaggle.json
          echo "Created kaggle.json from environment variables"
        else
          echo "Warning: No Kaggle credentials found. Tests may fail if they require data download."
        fi
    
    - name: Run linting
      run: |
        flake8 src/ --count --select=E9,F63,F7,F82 --show-source --statistics
        flake8 src/ --count --exit-zero --max-complexity=10 --max-line-length=127 --statistics
    
    - name: Run tests with pytest
      env:
        KAGGLE_USERNAME: ${{ secrets.KAGGLE_USERNAME }}
        KAGGLE_KEY: ${{ secrets.KAGGLE_KEY }}
      run: |
        pytest src/tests/ -v --cov=src --cov-report=xml --cov-report=html
    
    - name: Upload coverage to Codecov
      uses: codecov/codecov-action@v3
      with:
        file: ./coverage.xml
        flags: unittests
        name: codecov-umbrella
        fail_ci_if_error: false

  build:
    needs: test
    runs-on: ubuntu-latest
    if: github.event_name == 'push' && (github.ref == 'refs/heads/main' || startsWith(github.ref, 'refs/tags/'))
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.10'
    
    - name: Install build dependencies
      run: |
        python -m pip install --upgrade pip
        pip install build twine
    
    - name: Build package
      run: |
        python -m build
    
    - name: Upload build artifacts
      uses: actions/upload-artifact@v3
      with:
        name: dist-packages
        path: dist/
    
    # Publish to TestPyPI on any tag
    - name: Publish to TestPyPI
      if: startsWith(github.ref, 'refs/tags/')
      env:
        TWINE_USERNAME: __token__
        TWINE_PASSWORD: ${{ secrets.TEST_PYPI_API_TOKEN }}
      run: |
        twine upload --repository testpypi dist/*
    
    # Publish to PyPI only on v* tags (e.g., v1.0.0, v2.1.3)
    - name: Publish to PyPI
      if: startsWith(github.ref, 'refs/tags/v')
      env:
        TWINE_USERNAME: __token__
        TWINE_PASSWORD: ${{ secrets.PYPI_API_TOKEN }}
      run: |
        twine upload dist/*

  release:
    needs: build
    runs-on: ubuntu-latest
    if: startsWith(github.ref, 'refs/tags/')
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Download build artifacts
      uses: actions/download-artifact@v3
      with:
        name: dist-packages
        path: dist/
    
    - name: Create GitHub Release
      uses: softprops/action-gh-release@v1
      with:
        files: dist/*
        generate_release_notes: true
        draft: false
        prerelease: ${{ !startsWith(github.ref, 'refs/tags/v') }}
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

  docker-smoke-test:
    needs: test
    runs-on: ubuntu-latest
    if: github.event_name == 'push'
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Build Docker image
      run: |
        cd deployment
        docker build -t churn-api:test .
    
    - name: Start Docker container
      run: |
        docker run -d --name churn-api-test -p 8000:8000 churn-api:test
        sleep 10  # Wait for container to start
    
    - name: Test health endpoint
      run: |
        response=$(curl -s -o /dev/null -w "%{http_code}" http://localhost:8000/health)
        if [ "$response" != "200" ]; then
          echo "Health check failed with status: $response"
          docker logs churn-api-test
          exit 1
        fi
        echo "Health check passed with status: $response"
    
    - name: Test docs endpoint
      run: |
        response=$(curl -s -o /dev/null -w "%{http_code}" http://localhost:8000/docs)
        if [ "$response" != "200" ]; then
          echo "Docs endpoint failed with status: $response"
          docker logs churn-api-test
          exit 1
        fi
        echo "Docs endpoint passed with status: $response"
    
    - name: Test prediction endpoint
      run: |
        response=$(curl -s -X POST "http://localhost:8000/predict" \
          -H "Content-Type: application/json" \
          -d '{
            "credit_score": 650,
            "geography": "France",
            "gender": "Female",
            "age": 42,
            "tenure": 2,
            "balance": 83807.86,
            "num_of_products": 1,
            "has_cr_card": 1,
            "is_active_member": 1,
            "estimated_salary": 112542.58
          }' \
          -w "%{http_code}")
        
        http_code=$(echo "$response" | tail -c 4)
        if [ "$http_code" != "200" ]; then
          echo "Prediction endpoint failed with status: $http_code"
          docker logs churn-api-test
          exit 1
        fi
        echo "Prediction endpoint passed with status: $http_code"
    
    - name: Cleanup
      if: always()
      run: |
        docker stop churn-api-test || true
        docker rm churn-api-test || true

  container-registry:
    needs: [test, docker-smoke-test]
    runs-on: ubuntu-latest
    if: github.event_name == 'push' && (github.ref == 'refs/heads/main' || startsWith(github.ref, 'refs/tags/'))
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3
    
    - name: Log in to Docker Hub
      uses: docker/login-action@v3
      with:
        username: ${{ secrets.DOCKER_USERNAME }}
        password: ${{ secrets.DOCKER_PASSWORD }}
    
    - name: Extract metadata
      id: meta
      uses: docker/metadata-action@v5
      with:
        images: ${{ secrets.DOCKER_USERNAME }}/customerchurn
        tags: |
          type=ref,event=branch
          type=ref,event=pr
          type=semver,pattern={{version}}
          type=semver,pattern={{major}}.{{minor}}
          type=raw,value=latest,enable={{is_default_branch}}
    
    - name: Build and push Docker image
      uses: docker/build-push-action@v5
      with:
        context: ./deployment
        push: true
        tags: ${{ steps.meta.outputs.tags }}
        labels: ${{ steps.meta.outputs.labels }}
        cache-from: type=gha
        cache-to: type=gha,mode=max

  integration-test:
    needs: test
    runs-on: ubuntu-latest
    if: github.event_name == 'push'
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.10'
    
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
    
    - name: Setup Kaggle credentials for integration test
      env:
        KAGGLE_USERNAME: ${{ secrets.KAGGLE_USERNAME }}
        KAGGLE_KEY: ${{ secrets.KAGGLE_KEY }}
      run: |
        mkdir -p ~/.kaggle
        if [ -f "kaggle.json" ]; then
          cp kaggle.json ~/.kaggle/kaggle.json
          chmod 600 ~/.kaggle/kaggle.json
        elif [ ! -z "$KAGGLE_USERNAME" ] && [ ! -z "$KAGGLE_KEY" ]; then
          echo '{"username":"'$KAGGLE_USERNAME'","key":"'$KAGGLE_KEY'"}' > ~/.kaggle/kaggle.json
          chmod 600 ~/.kaggle/kaggle.json
        fi
    
    - name: Test data download functionality
      env:
        KAGGLE_USERNAME: ${{ secrets.KAGGLE_USERNAME }}
        KAGGLE_KEY: ${{ secrets.KAGGLE_KEY }}
      run: |
        python -c "
        from src.data.load_data import DataLoader
        loader = DataLoader()
        file_path = loader.download_from_kaggle()
        print(f'Download result: {file_path}')
        print(f'File exists: {file_path.exists()}')
        "
